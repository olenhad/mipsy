

curI <= fetchI

--numCycles := decode(curI)

wait until debug

LW
ALU <= decode 1 cycle
offset <= ALU 1 cycle
value <= RAM.read offset 1 cycle
decode.registerFile <= value 1 cycle

 SW
ALU <= decode 1 cycle
offset <= ALU 1 cycle
value <= decode.registerFile  1 cycle
RAM.write <= offset value 1 cycle


  LUI
imm <= decode 1 cycle
decode.registerFile <= imm + (16 0's) 1 cycle

  ADD*,  SUB*, AND, OR,ORI, NOR,SLL, SRL, SRA,SLT
 
ALU <= decode 1 cycle
alu_result <= ALU 1 cycle
decode.registerFile <= alu_result 1 cycle

  BEQ
ALU <= decode 1 cycle
alu_result <= ALU 1 cycle
PC <= alu_result 1 cycle
  
  J
PC <= PC + offset

